import org.apache.tools.ant.filters.ReplaceTokens;

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id "com.github.johnrengelman.shadow" version "5.2.0"
}

apply plugin: 'maven-publish'

group 'it.tigierrei'
version '4.1.2-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    maven { url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots/" }
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'http://repo.md-5.net/content/groups/public/' }
    maven { url = 'http://mvn.lumine.io/repository/maven-public/' }
    maven { url = 'https://repo.codemc.io/repository/nms' }
    // ProtocolLib/CitizensAPI/MineSkin-nodep mirror
    maven { url = 'https://repo.codemc.io/repository/maven-public' }
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compile ("org.mineskin:java-client-nodep:1.0.3-SNAPSHOT") {
        exclude group: "org.projectlombok"
        exclude group: "junit"
        exclude group: "com.google.code.gson"
        exclude group: "com.google.guava"
    }

    compileOnly ("LibsDisguises:LibsDisguises:10.0.8-SNAPSHOT") {
        exclude group: "com.comphenix.protocol"
        exclude group: "org.spigotmc"
    }
    compileOnly ("com.comphenix.protocol:ProtocolLib:4.5.1-SNAPSHOT") {
        exclude group: "com.comphenix.executors"
        exclude group: "cglib"
    }
    compileOnly "io.lumine.xikage:MythicMobs:4.9.2-SNAPSHOT"
    compileOnly "org.spigotmc:spigot-api:1.15.2-R0.1-SNAPSHOT"
    compileOnly "org.spigotmc:spigot:1.15.2-R0.1-SNAPSHOT"
    compileOnly ("net.citizensnpcs:citizensapi:2.0.26-SNAPSHOT") {
        exclude group: "ch.ethz.globis.phtree"
    }

    testCompile "junit:junit:4.12"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

// Encode your source code with UTF-8
compileJava.options.encoding = 'UTF-8'

processResources {
    filter ReplaceTokens, tokens: [VERSION: project.version]
}

// Generate Sources Jar
task sourcesJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}

// Generate Javadoc Jar
task javadocJar(type: Jar) {
    classifier 'javadoc'
    from javadoc.destinationDir
}

shadowJar {
    relocate 'kotlin', 'it.tigierrei.skinner.lib.kotlin'
    relocate 'org.mineskin', 'it.tigierrei.skinner.lib.org.mineskin'
    relocate 'org.jsoup', 'it.tigierrei.skinner.lib.org.jsoup'
    exclude '**/org/intellij/lang/annotations/**/*'
    exclude '**/org/jetbrains/annotations/**/*'
}

artifacts {
    // Build Sources and Javadoc Jar
    archives sourcesJar, javadocJar
}

tasks.build.dependsOn tasks.shadowJar
